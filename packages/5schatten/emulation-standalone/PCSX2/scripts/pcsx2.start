#!/bin/sh
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2018-present 5schatten (https://github.com/5schatten)

. /etc/profile
oe_setup_addon service.rr-config-tool

# Set common vars
DOCKER_PATH=/storage/.kodi/addons/service.system.docker/bin/docker
PCSX2_DOCKER_REPO=5schatten/arch-pcsx2
PCSX2_DOCKER_IMAGE_VERSION=version-1.0.0
PCSX2_LOG=/var/log/pcsx2.log

# Install the PCSX2 Docker image
install_docker_image() {
  DOCKER_IMAGE_INSTALL=$(docker images -a | grep ${PCSX2_DOCKER_REPO})
  if [ -z "${DOCKER_IMAGE_INSTALL}" ]; then
    echo "############################" >> ${PCSX2_LOG} 2>&1
    echo "# Pulling the Docker image #" >> ${PCSX2_LOG} 2>&1
    echo "############################" >> ${PCSX2_LOG} 2>&1
    docker pull ${PCSX2_DOCKER_REPO}:${PCSX2_DOCKER_IMAGE_VERSION} >> ${PCSX2_LOG} 2>&1
  fi
}

# Update the PCSX2 Docker image
update_docker_image() {
  DOCKER_IMAGE_UPDATE=$(docker images -a | grep ${PCSX2_DOCKER_IMAGE_VERSION})
  if [ -z "${DOCKER_IMAGE_UPDATE}" ]; then
    echo "#############################" >> ${PCSX2_LOG} 2>&1
    echo "# Updating the Docker image #" >> ${PCSX2_LOG} 2>&1
    echo "#############################" >> ${PCSX2_LOG} 2>&1
    docker pull ${PCSX2_DOCKER_REPO}:${PCSX2_DOCKER_IMAGE_VERSION} >> ${PCSX2_LOG} 2>&1
  fi
}

# Clean up the PCSX2 Docker images
clean_docker_image() {
  # Clean up image with "latest" tag
  DOCKER_TAG_LATEST=$(docker images -a | grep "latest" | awk '{print $3}')
  if [ ! -z "${DOCKER_TAG_LATEST}" ]; then
    echo "#########################" >> ${PCSX2_LOG} 2>&1
    echo "# Clean up tag "latest" #" >> ${PCSX2_LOG} 2>&1
    echo "#########################" >> ${PCSX2_LOG} 2>&1
    docker image rm -f $(docker images -a | grep "latest" | awk '{print $3}') >> ${PCSX2_LOG} 2>&1
  fi

  # Clean up images with oudated tags
  DOCKER_TAG_OUTDATED=$(docker images -a | grep ${PCSX2_DOCKER_REPO} | awk '{print $3}' | awk 'FNR == 2')
  if [ ! -z "${DOCKER_TAG_OUTDATED}" ]; then
    echo "#######################" >> ${PCSX2_LOG} 2>&1
    echo "# Clean up "old" tags #" >> ${PCSX2_LOG} 2>&1
    echo "#######################" >> ${PCSX2_LOG} 2>&1
    for IMAGE_ID in $(docker images -a | grep ${PCSX2_DOCKER_REPO} | awk '{print $3}' | awk 'NR>1'); do
      docker image rm -f ${IMAGE_ID} >> ${PCSX2_LOG} 2>&1
    done
  fi
}

# Run the PCSX2 Docker image
run_docker_image() {
  echo "##################" >> ${PCSX2_LOG} 2>&1
  echo "# Starting PCSX2 #" >> ${PCSX2_LOG} 2>&1
  echo "##################" >> ${PCSX2_LOG} 2>&1

  # Stop FluidSynth / set audio driver to ALSA
  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ] && [ -f /var/run/fluidsynth.run ]; then
    stop_FluidSynth_backend
    usleep 500000
    unload_pulseaudio_sink
    usleep 500000
    export SDL_AUDIODRIVER=alsa
  fi

  # Get tag of installed Docker image
  DOCKER_IMAGE_INSTALLED_VERSION=$(docker images -a | grep ${PCSX2_DOCKER_REPO} | awk '{print $2}' | awk 'FNR == 1')

  # Set common Docker arguments
  DOCKER_ARGS="--rm \
               --name arch-pcsx2 \
               --privileged \
               -i \
               -e DISPLAY=:0.0 \
               -v /dev/shm:/dev/shm \
               -v /var/media:/media \
               -v /var/run/localtime:/etc/localtime
               -v /storage:/storage \
               -v /storage/.config/asound.conf:/etc/asound.conf \
               -v /storage/.config/PCSX2:/root/.config/PCSX2 \
               -v /storage/roms/bios:/root/.config/PCSX2/bios \
               -v /tmp/.X11-unix:/tmp/.X11-unix"

  # Start the Docker image / apply args / run PCSX2
  ${DOCKER_PATH} run ${DOCKER_ARGS} ${PCSX2_DOCKER_REPO}:${DOCKER_IMAGE_INSTALLED_VERSION} /usr/bin/PCSX2 "$@" >> ${PCSX2_LOG} 2>&1

  # Set audio driver to PulseAudio / start FluidSynth
  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ] && [ ! -f /var/run/fluidsynth.run ]; then
    export SDL_AUDIODRIVER=pulseaudio
    load_pulseaudio_sink
    usleep 500000
    start_FluidSynth_backend
    usleep 500000
  fi
}

if [ -x ${DOCKER_PATH} ]; then
  # Freeze Kodi / stop audio
  kodifreeze.sh freeze > ${PCSX2_LOG} 2>&1

  # Get Docker version
  ${DOCKER_PATH} -v >> ${PCSX2_LOG} 2>&1

  # Install / update / clean / run the PCSX2 Docker image
  install_docker_image

  update_docker_image

  clean_docker_image

  run_docker_image "$@"

  # Switch back to Frontends or unfreeze Kodi & start audio
  pidof emulationstation > /dev/null 2>&1 || pidof pegasus-fe > /dev/null 2>&1 || kodifreeze.sh unfreeze
else
  # Inform about the missing Docker addon
  echo "######################################################################################################" > ${PCSX2_LOG} 2>&1
  echo "# The Docker addon is missing. Please check out the Kodi addons, install Docker and run PCSX2 again. #" >> ${PCSX2_LOG} 2>&1
  echo "######################################################################################################" >> ${PCSX2_LOG} 2>&1
fi
